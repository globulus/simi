import native "Core"

class Object {
    native size
    native keys
    native values
    native zip # Returns an iterable that goes through key-value pairs
    native zipped # Returns a List of key-value pairs
    native isEmpty
    native clear
    native iterate
    native lock

    native merge(with)

    fn isNotEmpty = not isEmpty()
    fn has(key) = key in keys()
}

class_ List {
    native init
    native get(key)
    native set(key, value)
    native size
    native add(value)
    native addAll(from)
    native isEmpty
    native clear
    native iterate
}

class_ Stream {
    enum Op {
        WHERE, MAP
    }

    init(@src) {
        @ops = List()
    }

    fn where(predicate) {
        @ops += [op = Op.WHERE, arg = predicate]
        return self
    }

    fn map(transformation) {
        @ops += [op = Op.MAP, arg = transformation]
        return self
    }

    fn toMutableList {
        list = List()
        for item in src {
            dst = item
            for [op, arg] in ops {
                when op {
                    Op.WHERE {
                        if not arg(dst) {
                            dst $= nil
                            break
                        }
                    }
                    Op.MAP {
                        dst $= arg(dst)
                    }
                }
            }
            if dst != nil {
                list += dst
            }
        }
        return list
    }

    fn toList = toMutableList().lock()
}

class_ StreamMixin {
    fn where(predicate) = Stream(self).where(predicate).toList()
    fn map(transformation) = Stream(self).map(transformation).toList()
}

extend Object import StreamMixin
extend List import StreamMixin

class_ String {
    native get(key)
    native replace(old, new, ignoreCase = false)
#    native builder
    fn iterate = [
        src = self,
        i = 0,
        next = fn = if @i == @src.len nil else {
            c = @src.(@i)
            @i += 1
            c
        }
   ]
   fn chars = $[for c in self do c]
}

class_ Function

class_ Class

class Exception {
    init(@message)
}
class TypeMismatchException is Exception {
    init {
        super.init("tme")
    }
}
class NilReferenceException is Exception
class IllegalArgumentException is Exception
class AbstractMethodException is Exception
class MutabilityLockException is Exception

Math _= [
    min = fn(a, b) = if (a < b) a else b,
    max = fn(a, b) = if (a > b) a else b
]

class Range {
    init(@from, @to) {
        @min = Math.min(from, to)
        @max = Math.max(from, to)
        @ascending = to >= from
    }

    fn iterate() = [
        src = self,
        i = @from,
        next = if @ascending fn = if @i > @src.to nil else {
            @i += 1
            @i - 1
        } else fn = if @i < @src.to nil else {
            @i -= 1
            @i + 1
        }
    ]

    fn has(o) = o >= min and o <= max
}

class_ Num {
    fn rangeTo(lim) = Range(@_, lim)
    fn rangeUntil(lim) = Range(@_, lim - 1)

    fn equals(o) = (o is Num and @_ == o._)
    fn matches(o) = if self == o {
        @_
    } else {
        nil
    }

    fn iterate = 0.rangeUntil(self).iterate()
}