import "./minibattle/Utils.simi"
import "./minibattle/Terrain.simi"
import "./minibattle/Unit.simi"

class Board(Renderable) {
    SIZE = [w = 16, h = 16]

    def init() {
         @board = Object.array(@SIZE.h, @_Row())
         cols = @SIZE.w
         @_rowIndexWidth = Math.round(Math.floor(Math.log10(cols))) + 1
         # Add spaces in front to pad for row indices, then add column letters
         @_header = " " * (@_rowIndexWidth + 2)\
            + String.from(Object.iterating(cols.times()).map(def n = ("A".unicode() + n).char()), "  ")\
            + "\n"
    }

    def render() {
        s = String.builder().add(@_header)
        for [i, row] in @board.zip() {
            s.add(("%\(@_rowIndexWidth)d  %s\n").format([i + 1, row.render()]))
        }
        return s.build()
    }

    def _cell(at) = @board.(cell.r).(cell.c)
    def unitAt(cell) = @_cell(cell).unit
    def terrainAt(cell) = @_cell(cell).terrain

    def moveUnit(from, to) {
        fromCell = @_cell(from)
        @_cell(to).unit = fromCell.unit
        fromCell.unit = nil
    }
    def removeUnit(from) = @_cell(from).unit = nil
    def put(unit, at) = @_cell(at).unit = unit
    def terraform(terrain, at) = @_cell(at).terrain = terrain

    class _Row(Renderable) {
        def init() {
            for _ in Board.SIZE.w.times() {
                 @append($[terrain = Terrain.values.randomItem()])
            }
        }

        def render() = String.from(@ruler().map(def i = "%-2s".format([(i.unit ?? i.terrain).render()])), " ")
    }
}
