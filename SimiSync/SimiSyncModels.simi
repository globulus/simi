import "./Stdlib/File.simi"
import "./Stdlib/CodeBlocks.simi"

class_ SimiSyncModels:

    # Model annotation class
    class_ ModelClass:
        def init(version): pass
        def init(version, clientName): pass
    end

    # Model field annotation class
    class_ ModelField:
        def init(): @init(false, 1)
        def init(serverOnly): pass
        def init(serverOnly, version): pass
        def init(serverOnly, version, clientName): pass
    end

    # Model method annotation class
    class_ ModelMethod:
    end

    class_ ModelParser:
        def parse(version):
            import CodeBlocks
            # By convention, all model files should live in a directory named "models" and its subdirectories
            for file in File.listAll(path = "./models", recursive = true):
                # Read and interpret the content of the file
                modelCode = File.readString(file.path)
                modelClass = gu File.readString(file.path)
                # Each class should have a proper ModelClass annotation
                modelClassAnnot = @_extractAnnot(modelClass, ModelClass)
                if not modelClassAnnot : continue
                className = modelClassAnnot.clientName ?? ClassCode(modelClass).name
                classComposer = ClassComposer(className)
                for e in modelClass.enumerate():
                    [key, value] = e
                    if value is Function:
                        if not @_extractAnnot(value, ModelMethod): continue
                        classComposer.method(value)
                    end
                    else:
                        fieldAnnot = @_extractAnnot(value, ModelField)
                        if not fieldAnnot or fieldAnnot.serverOnly or fieldAnnot.version > version: continue
                        classComposer.field(fieldAnnot.clientName ?? key, value)
                    end
                end
                clientCode = classComposer.getString()
                writer = WriteStream(File("./clientModels/" + className + "_" + version + ".simi"))
                writer.write(clientCode)
                writer.close()
            end

        end

        def _extractAnnot(field, annotClass): return ?(!!field).filter(def a: a is annotClass).first()
    end
end
