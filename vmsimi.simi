# Comment
#* multiline comments
span
multiple lines *#

import "Date.jar"

class Object {

}

class Function

class Range {
    init(@min, @max)

    def iterate() = Range.Iterator(self)

    def has(o) = o >= @min and o <= @max

    class Iterator {
        init(@range) {
            self.current = range.min
        }

        def next() = if @current <= @range.max {
                @current = @current + 1
                @current - 1
            } else {
                nil
            }
    }
}

class Num {
    def rangeTo(lim) = Range(@_, lim)

    def rangeUntil(lim) = Range(@_, lim - 1)

    def equals(o) = (o is Num and @_ == o._)

    def matches(o) = if self == o {
        @_
    } else {
        nil
    }
}

class String

class Date {
    native init
    native at(time = 0)
}

def test(title, expected, proc) {
    r = proc()
    print "Testing \(title): " + if r == expected "SUCCESS" else "FAIL got \(r) expected \(expected)"
}

a = 5
b = a + 3
a $= b - 4 / (2 + 2 * 2)
b /= 2
test("a is", 7.333333333333333, a)
test("b is", 4, b)
test("if", "a", =if a < 2 or a < 10 {
    "a"
} else if b == 4 {
    "b"
} else {
    "both are false"
})
test("nil coalescence", 5, def {
    v = nil
    return v ?? 5
})
test("nil coalescence assign", 5, def {
    v = nil
    v ??= 5
    return v
})
test("nil coalescence assign again", 5, def {
    v = 5
    v ??= 6
    return v
})
test("while", 2, def {
    a $= 5
    while a > 1 {
        print "a is \(a)"
        if a == 4 {
            a -= 1
            continue
        } else if a == 2 {
            break
        }
        print "again"
        a -= 1
    }
    return a
})
test("when", "3 or 4", def {
    a $= 3
    when a {
        2 { return "2" }
        3 or 4 { return "3 or 4" }
        else { return "else" }
    }
})
test("if expr", 2, =if 0 {
    print "yup"
    5
} else if 0 {
    print "nope"
    6
} else {
    2
})
test("when expr", 5, =when b {
  2 = 2
  4 = 5
  else = 6
})
def funcWithOptionals(what = "func", smth = 6) {
    return what + smth
}
test("func with 2 params", "aa", =funcWithOptionals("a", "a"))
test("func with 1 optional", "a6", =funcWithOptionals("a"))
test("func with 2 optionals", "func6", =funcWithOptionals())

def retFunc() {
    print "in ret func"
    return 5
    print "this shouldn't be printed"
}
test("func with return", 5, =retFunc())

def outer() {
  x = "outside"
  def inner() {
    return x
  }
  return inner
}
test("closure", "outside", def {
    closure = outer()
    return closure()
})

def selfReturning() {
    return self(def)
}
test("self(def)", selfReturning, selfReturning)

class Brioche {
    def eat(a, b) {
        return "ate \(a) and \(b)"
    }
}
test("class instantiation and invoke", "ate jam and jelly", Brioche().eat("jam", "jelly"))

class Pair {
    init(@first, @second)
}
test("class init with autoset", 3, def {
    pair = Pair(1, 2)
    return pair.first + pair.second
})

class Nested {
  ichBin = "Kuhlen"
  def method() {
    def function() {
      return @ichBin
    }
    return function()
  }
}
test("nested self access", "Kuhlen", =Nested().method())

class Superclass {
    def methodToInherit() {
        return "superclass method"
    }
}
class Subclass is Superclass {
    superClassStr = "my superclass is " + super

    def methodToInherit() {
        return super.methodToInherit() + " overridden"
    }
}
test("super access", "my superclass is Superclass", =Subclass().superClassStr)
test("method overriding with super invoke", "superclass method overridden", Subclass().methodToInherit())


#print 1..3 is Range
#print 2 in 1..4
#print 2 <> 2
#print 2 <> 3
#
#for i in 1...5 {
#    print i
#}
#
#class Klass {
#    init(@ja is String = "str")
#}
#print Klass().ja
#print Klass("dva").ja
#print Klass(1).ja
#
#(def {
#    print _0 + _1
#})(1, 2)
#
#CONST_ANT = 1
##CONST_ANT $= 2 # Uncomment to test assignment to const
#
#def funcReturningNum(a) is Num {
#    return a
#}
#print funcReturningNum("trolo")
#print funcReturningNum is Function
#print funcReturningNum.name + funcReturningNum.arity
#
#class OverridesGet {
#    def get(val) {
#        when val {
#            is Num { print "is num" }
#            is String {
#                print "is str"
#                print "super get " + super.get(val)
#             }
#            else { print "something else \(val)" }
#        }
#        return 1
#    }
#    def set(key, val) {
#        super.set(key, val)
#        print "set \(key) \(val)"
#    }
#}
#overridesGet = OverridesGet()
#print "3 == " + (overridesGet.(OverridesGet) + overridesGet.1 + overridesGet.("ssss") + overridesGet.abc)
#overridesGet.key = 42
#overridesGet.key
#
#date = Date()
#print date
#print date.time
#print Date.at().time
#print Date.at(1).time
