class RangeIterator {
    init(@range) {
        self.current = range.min
    }

    def next() = if self.current <= self.range.max {
            @current = @current + 1
            @current - 1
        } else {
            nil
        }
}

class Range {
    init(@min, @max)

    def iterate() = RangeIterator(self)

    def has(o) = o >= @min and o <= @max
}

class Num {
    def rangeTo(lim) = Range(@_, lim)

    def rangeUntil(lim) = Range(@_, lim - 1)

    def equals(o) = (o is Num and @_ == o._)

    def matches(o) = if self == o {
        @_
    } else {
        nil
    }
}

class String

a = 5
b = a + 3
a $= b - 4 / (2 + 2 * 2)
b /= 2
print "a is \(a) == 7.33"
print "b is \(b) == 4"


print "if test \"a\" =="
if a < 2 or a < 10 {
    print "a"
} else if b == 4 {
    print "b"
} else {
    print "both are false"
}

print "testing nil coalescence 5 =="
a $= nil
print a ?? 5

print "testing nil coalescence assign 5 == "
a ??= 5
print a
print "and testing nil coalescence assign some more 5 == "
a ??= 6
print a

a $= 5
while a > 1 {
    print "a is \(a)"
    if a == 4 {
        a -= 1
        continue
    } else if a == 2 {
        break
    }
    print "again"
    a -= 1
}
print "while test 2 == \(a)"

print "when test 3 or 4 == "
a $= 3
when a {
    2 { print "2" }
    3 or 4 { print "3 or 4" }
    else { print "else" }
}

print "if expr test 2 =="
print if 0 {
    print "yup"
    5
} else if 0 {
    print "nope"
    6
} else {
    2
}

print "when expr test 5 == "
print when a {
    2 = 2
    3 = 5
    else = 6
}

print "func test func6 == "
def func(what = "func", smth = 6) {
    b = 3
    print what + smth
    a $= 2
    print "a inside is \(a)"
}
func()

print "return func test 5 == "
def retFunc() {
    print "in ret func"
    return 5
    print "this shouldn't be printed"
}
print retFunc()

def outer() {
  x = "outside"
  print self(def)
  def inner() {
    print x
  }
  return inner
}
closure = outer()
closure()

class Brioche {
    def eat(a, b) {
        print "ate \(a) and \(b)"
    }
    def spit() {}
}
print "Brioche == \(Brioche)"
br = Brioche()
print "Brioche instance == \(br)"
br.jam = "jelly"
print "jelly == \(br.jam)"

class Pair {
    init(@first, @second)
}
pair = Pair(1, 2)
print "3 == \(pair.first + pair.second)"

class Nested {
  def method() {
    def function() {
      print self
    }
    function()
  }
}

Nested().method()

class Subclass is Nested {

}

print Subclass().method()

print 1..3 is Range
print 2 in 1..4
print 2 <> 2
print 2 <> 3

for i in 1...5 {
    print i
}

class Klass {
    init(@ja is String = "str")
}
print Klass().ja
print Klass("dva").ja
print Klass(1).ja

(def {
    print _0 + _1
})(1, 2)

CONST_ANT = 1
#CONST_ANT $= 2 # Uncomment to test assignment to const

def funcReturningNum(a) is Num {
    return a
}
print funcReturningNum("trolo")
