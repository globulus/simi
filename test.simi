class Point:
    def init(x, y): pass

    # This is fully equivalent to:
    # def init(x, y):
    #   @x = x
    #   @y = y
    # end

    # In value classes, you may want to override the equals method
    # to check against fields, i.e to use matches() with == operator:
   # def equals(other): return @matches(other)
end

p1 = Point(1, 2)
p2 = Point(1, 2)
print p1 == p2

date = Date.now()
print date
print date.format("dd/MM/yyyy hh:mm:ss")

#$a = 3
#b = 5
#c = $a + b
#$a = 4
#print c

def testStringNumberConversion():
    numStr = "123.3Å¾"
    numVal = numStr.toNumber()
    rescue ex:
        if ex: print "Invalid number format"
        else: print numVal
    end
end
testStringNumberConversion()

class CarException(Exception):
end

class TankOverflowException(Exception):
end

class Car:

    def init(capacity, tank): pass

    def refill(amount):
        print "Doing something"
        if amount < 0: CarException("Amount < 0!").raise()
        if amount > 100: TankOverflowException("Too much gasoline!").raise()
        if @tank + amount > @capacity: @tank = @capacity
        else: @tank = @tank + amount
    end

    def refill(amount, doprint):
        @tank = 0
     end

     def f(): pass
end

class OtherCar(Car, Range):
    def init():
        super.init(10, 20)
        @start = 5
        @stop = 10
        @step = 2
        super.refill(2)
        @refill(3)
   end

   def refill(amount):
        print "Doing nothing"
   end

   def has(value):
    return super(Range).has(value)
   end
end

otherCar = OtherCar()
print otherCar.capacity
print 6 in otherCar

#def min3(a, b, c):
#    min2 = def (a, b):
#        if a < b: return a
#        else: return b
#    end
#    return min2(min2(a, b), c)
#end

#d = min3(4, 5, 3)

def refillCar():
    njuKar = Car.builder().capacity(10).tank(20).build()
    print "should be printed"
    njuKar.refill(10)
    print "should be skipped"
    rescue ex:
        print ?ex.message
        if ex: print "rescue from: " + ex.message
        if ex is CarException: print "car exc"
        else: print ex
        print "rescue always"
    end
    print "after rescue"
end

refillCar()

#string = $String.builder().plus(3).plus("aaa").plus(4.5).plus("bbb").build().substring(2, 5)
#print string

dict = [a = 1, b = "str", c = Range(1, 10, 3)]
print dict
for i in dict:
    print i
    if i == "b": continue
    print dict.(i)
end

arr = [1, 2, 3]\
    .reversed()\
    .joined(with = [5, 6, 7])\
    .filter(def i: i <= 5)\
    .map(def i: i * 2)\
    .sorted(def (l, r): -(l <> r))
print arr

print Math.pow(2, 3)

#$Object.each = def f:
#    for item in self: f(item)
#end

#print [a = "1", b = def a: return a * a].b(2)

for i in 6.times(): print i

for c in "abcdef": print c
print "cde" in "abcd"
print "afe" + "pde".1

len = arr.len()
print len

#arr.each(def i: print i * 2)

keys = arr.keys()
print keys

print arr
for i in arr: print i

print "arr has value:"
print 22 in arr

print "dict has key:"
print "gg" in dict

str = "this is a 'string'"
print str

$a = 2
while $a < 10:
    print $a
    $a = $a + 1
end

for i in Range(start=10, stop=-20, step=-3):
    print i
end

car = Car(40, 10)
print(car.tank)
car.refill(20)
print(car.tank)
car.refill(20)
print(car.tank)
car.refill(20, 10)
print car.tank
