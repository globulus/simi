import "./Stdlib/File.simi"

def fib(n):
  if n < 2: return n
  return fib(n - 1) + fib(n - 2)
end

#before = clock()
#print fib(40)
#after = clock()
#print after - before

print gu "2+2"

GuClass = gu "class GuClass:
    def test(): print 'GuClassTest'
end"
print GuClass().test()

(def a:
    print a
end)(3)

Fruit = Enum.of(["APPLE" = [size = 3], "ORANGE" = [size = 2], "BANANA" = [size = 4]])
apple = Fruit.APPLE
print "Apple is fruit: " + (apple is Fruit)
print "Apple == Apple: " + (apple == Fruit.APPLE)
print "Apple == Banana: " + (apple == Fruit.BANANA)
Veggies = Enum.of(["POTATO", "CUCUMBER"], [isRound = def (): return self == Veggies.POTATO])
potato = Veggies.POTATO
print "Apple is Veggie: " + (apple is Veggies)
print "Apple size: " + apple.size
print "Is potato round: " + potato.isRound()
print "Is cucumber round: " + Veggies.CUCUMBER.isRound()

class OuterClass:

    class InnerClass:
        def test(): print "Inner class test"
    end

    class _PrivateInnerClass:
        def test(): print "Shouldn't happen"
    end
end
def testInnerClass():
    OuterClass.InnerClass().test()
#    OuterClass._PrivateInnerClass().test()
end
testInnerClass()

![method = "POST"]
def testFile():
    #File.readLines("README.md").forEach(def s: print s)
    file = File("README.md")
    reader = ReadStream(file)
    while true:
        line = reader.readLine()
        if line: print line
        else: break
    end
    writer = WriteStream(File("writetest.txt"))
    writer.write("string")
    writer.newLine()
    writer.write("new string")
    rescue ex:
    end
    reader.close()
    writer.close()
end
#testFile()
print "Annotations"
print !!testFile
def printFunAnnotations(fun): print !!fun
printFunAnnotations(testFile)

def testObjectDecomp():
    print "Obj decomp"
    obj = [a = 3, b = 4]
    [a, c] = obj
    print a
    print b
end
testObjectDecomp()

def testWhen():
    print "When test"
    a = 13
    when a:
        5: print "a is 5"
        10 or 13: print "a is 10 or 13"
        is $String: print "a is String"
        not in Range(12, 16): print "not between 12 and 16"
        else: print "reached the default branch"
    end
end
testWhen()

def testYieldFun():
    print "before yield"
    for i in 3.times():
        if i < 2: yield "yield" + i
        else: return "return in yield"
    end
    print "afterYield"
end
def testYield():
    print "Calling yield test"
    print testYieldFun()
    print "Calling again..."
    print testYieldFun()
    print "Calling yet again..."
    print testYieldFun()
    print "Now it should restart"
    print testYieldFun()
end
testYield()

class Point:
    def init(x, y): pass

    # This is fully equivalent to:
    # def init(x, y):
    #   @x = x
    #   @y = y
    # end

    # In value classes, you may want to override the equals method
    # to check against fields, i.e to use matches() with == operator:
   # def equals(other): return @matches(other)
end

$var = 1
$var += 2
print $var

p1 = Point(1, 2)
p2 = Point(1, 2)
print p1 == p2

date = Date.now()
print date
print date.format("dd/MM/yyyy hh:mm:ss")

#$a = 3
#b = 5
#c = $a + b
#$a = 4
#print c

def testStringNumberConversion():
    numStr = "123.3Å¾"
    numVal = numStr.toNumber()
    rescue ex:
        if ex: print "Invalid number format"
        else: print numVal
    end
end
testStringNumberConversion()

class CarException(Exception):
end

class TankOverflowException(Exception):
end

![dbName = "Car"]
![serialize = false]
class Car:

    ![dbField = "wheels"]
    wheels = 4

    def init(capacity, tank): pass

    def refill(amount):
        print "Doing something"
        if amount < 0: CarException("Amount < 0!").raise()
        if amount > 100: TankOverflowException("Too much gasoline!").raise()
        if @tank + amount > @capacity: @tank = @capacity
        else: @tank = @tank + amount
    end

    def refill(amount, doprint):
        @tank = 0
     end

    ![method = "GET"]
     def f(): pass
end
print "Car annotations"
print !!Car
print !!Car.wheels
print !!Car.f
printFunAnnotations(Car.f)

class OtherCar(Car, Range):
    def init():
        super.init(10, 20)
        @start = 5
        @stop = 10
        @step = 2
        super.refill(2)
        @refill(3)
   end

   def refill(amount):
        print "Doing nothing"
   end

   def has(value):
    return super(Range).has(value)
   end
end

otherCar = OtherCar()
print otherCar.capacity
print 6 in otherCar

#def min3(a, b, c):
#    min2 = def (a, b):
#        if a < b: return a
#        else: return b
#    end
#    return min2(min2(a, b), c)
#end

#d = min3(4, 5, 3)

def refillCar():
    njuKar = Car.builder().capacity(10).tank(20).build()
    print "should be printed"
    njuKar.refill(10)
    print "should be skipped"
    rescue ex:
        print ?ex.message
        if ex: print "rescue from: " + ex.message
        if ex is CarException: print "car exc"
        else: print ex
        print "rescue always"
    end
    print "after rescue"
end

refillCar()

#string = $String.builder().add(3).add("aaa").add(4.5).add("bbb").build().substring(2, 5)
#print string

dict = [a = 1, b = "str", c = Range(1, 10, 3)]
print dict
for i in dict:
    print i
    if i == "b": continue
    print dict.(i)
end

arr = [1, 2, 3]\
    .reversed()\
    .joined(with = [5, 6, 7])\
    .filter(def i: i <= 5)\
    .map(def i: i * 2)\
    .sorted(def (l, r): -(l <> r))
print arr

print Math.pow(2, 3)

#$Object.each = def f:
#    for item in self: f(item)
#end

#print [a = "1", b = def a: return a * a].b(2)

for i in 6.times(): print i

for c in "abcdef": print c
print "cde" in "abcd"
print "afe" + "pde".1

len = arr.len()
print len

#arr.each(def i: print i * 2)

keys = arr.keys()
print keys

print arr
for i in arr: print i

print "arr has value:"
print 22 in arr

print "dict has key:"
print "gg" in dict

str = "this is a 'string'"
print str

$a = 2
while $a < 10:
    print $a
    $a = $a + 1
end

for i in Range(start=10, stop=-20, step=-3):
    print i
end

car = Car(40, 10)
print(car.tank)
car.refill(20)
print(car.tank)
car.refill(20)
print(car.tank)
car.refill(20, 10)
print car.tank
