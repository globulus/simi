import "./Stdlib/File.simi"
import "./Stdlib/Gson.simi"
import "./Stdlib/Net.simi"
import "./Stdlib/Async.simi"
import "./Stdlib/Decorator.simi"
import "./SimiSync/SimiSyncModels.simi"
import "./Stdlib/sql/Mariadb.simi"

def closureTest():
   a = 5
   (def ():
    print a + " == 5"
    a = 6
    print a + " == 6"
   end)()
   print a + " == 5"
   (def ():
    print a + " == 5"
    a $= 3
    print a + " == 3"
   end)()
   print a + " == 3"
   (def ():
    print a + " == 3"
    a $= 4
    print a + " == 4"
    a = 7
    print a + " == 7"
    a $= 8
    print a + " == 8"
   end)()
   print a + " == 4"
end
closureTest()

#SimiSyncModels.ModelParser.parse(1)
def typeCheckTest(a, b is String, c is Number, d is Range):
    print "at end"
end
print ivic typeCheckTest
class TypeCheckTestClass:
    def init(a is String, b, c, d is Number): pass
end
print ivic TypeCheckTestClass.init
typeCheckTest(1, "", 3, Range(1, 2))

dejt = Date()
print dejt
print dejt.("class")

clck = clock()
 def ife1():
        return ife(1 < 2, Math.pow(2, 32), Math.pow(2, 32))
    end
    print "testing ife1()"
    print ife1()
    print "" + (clock() - clck)
    clck2 = clock()
    def ife2():
        return ife(1 < 2, :Math.pow(2, 32), :Math.pow(2, 32))
    end
    print "testing ife2()"
    print ife2()
    print "" + (clock() - clck2)

print clck is Function
print ife1 is Function

#Decorator.go(def ():
#
#    def fib(n):
##        print "first time in fib"
#        cache = $[]
#        arg = 0
#        inner = def n:
#            if n < 2: return n
#            arg $= n - 1
#            a = loop()
#            arg $= n - 2
#            b = loop()
#            return a + b
#        end
#        loop = def ():
#           while true:
##            print cache
#            key = arg.toString()
#            if key not in cache: cache.(key) = inner(arg)
##            else: print "have cache for " + key
##            print "about to yield " + cache.(key)
#            yield cache.(key)
#         end
#        end
#        return inner(n)
#    end
#
#    decorate* "Decorator.memoize"
#    def fib2(n):
#        if n < 2: return n
#        return fib2(n - 2) + fib2(n - 1)
#    end
#
#    decorate* "Decorator.memoize"
#    def gcd(a, b):
#        if b: return gcd(b, a % b)
#        return a
#    end
#
#    decorate* "Decorator.timed"
#    def testFib(n):
#        print "Testing fib"
#        print fib(n)
#        print "Done testing fib"
#    end
#    for _ in 3.times():
#        testFib(10)
#    end
#
#    decorate* "Decorator.timed"
#    def testFib2(n):
#        print "Testing fib2"
#        print fib2(n)
#        print "Done testing fib2"
#    end
#    for _ in 3.times():
#        testFib2(10)
#    end
#
#    decorate* "Decorator.timed"
#    def testGcd(a, b):
#        print "Testing gcd"
#        print gcd(a, b)
#        print "Done testing gcd"
#    end
#    for _ in 3.times():
#        testGcd(10000, 41)
#    end
#end)()

#Decorator.test()

Net.go(def ():
    [code, body] = post* [url = "http://httpbin.org/post", json = "", headers = [accept = "application/json"]]
    print "Got response"
    print code
    print body
end)

asyncf = Async.go(def ():
    a = 5
    b = 6
    c = await* Gson.parseAsync('{a1:2}')
    print "async c is " + c
    d = 5
    e = 7
    f = await* Gson.parseAsync('{a2:3}')
    print "async f is " + f
    g = 10
end)
#asyncf()

def fib(n):
  if n < 2: return n
  return fib(n - 1) + fib(n - 2)
end

#before = clock()
#print fib(40)
#after = clock()
#print after - before

print gu "2+2"

GuClass = gu "class GuClass:
    def test(): print 'GuClassTest'
end"
print GuClass().test()

(def a:
    print a
end)(3)

Fruit = Enum.of(["APPLE" = [size = 3], "ORANGE" = [size = 2], "BANANA" = [size = 4]])
apple = Fruit.APPLE
print "Apple is fruit: " + (apple is Fruit)
print "Apple == Apple: " + (apple == Fruit.APPLE)
print "Apple == Banana: " + (apple == Fruit.BANANA)
Veggies = Enum.of(["POTATO", "CUCUMBER"], [isRound = def (): return self == Veggies.POTATO])
potato = Veggies.POTATO
print "Apple is Veggie: " + (apple is Veggies)
print "Apple size: " + apple.size
print "Is potato round: " + potato.isRound()
print "Is cucumber round: " + Veggies.CUCUMBER.isRound()

class OuterClass:

    class InnerClass:
        def test(): print "Inner class test"
    end

    class _PrivateInnerClass:
        def test(): print "Shouldn't happen"
    end
end
def testInnerClass():
    OuterClass.InnerClass().test()
#    OuterClass._PrivateInnerClass().test()
end
testInnerClass()

![method = "POST"]
def testFile():
    #File.readLines("README.md").forEach(def s: print s)
    file = File("README.md")
    reader = ReadStream(file)
    while true:
        line = reader.readLine()
        if line: print line
        else: break
    end
    writer = WriteStream(File("writetest.txt"))
    writer.write("string")
    writer.newLine()
    writer.write("new string")
    rescue ex:
    end
    reader.close()
    writer.close()
end
#testFile()
print "Annotations"
print !!testFile
def printFunAnnotations(fun): print !!fun
printFunAnnotations(testFile)

def testObjectDecomp():
    print "Obj decomp"
    obj = [a = 3, b = 4]
    [a, c] = obj
    print a
    print b
    print c
end
testObjectDecomp()

def testWhen():
    print "When test"
    a = 13
    when a:
        5: print "a is 5"
        10 or 13: print "a is 10 or 13"
        is String: print "a is String"
        not in Range(12, 16): print "not between 12 and 16"
        else: print "reached the default branch"
    end
end
testWhen()

def testYieldFun():
    print "before yield"
    for i in 3.times():
        if i < 2: yield "yield" + i
        else: return "return in yield"
    end
    print "afterYield"
end
def testYield():
    print "Calling yield test"
    print testYieldFun()
    print "Calling again..."
    print testYieldFun()
    print "Calling yet again..."
    print testYieldFun()
    print "Now it should restart"
    print testYieldFun()
end
testYield()

class Point:
    def init(x, y): pass

    # This is fully equivalent to:
    # def init(x, y):
    #   @x = x
    #   @y = y
    # end

    # In value classes, you may want to override the equals method
    # to check against fields, i.e to use matches() with == operator:
   # def equals(other): return @matches(other)
end

p1 = Point(1, 2)
p2 = Point(1, 2)
print p1 == p2

date = Date.now()
print date
print date.format("dd/MM/yyyy hh:mm:ss")

def testStringNumberConversion():
    numStr = "123.3Å¾"
    numVal = numStr.toNumber()
    rescue ex:
        if ex: print "Invalid number format"
        else: print numVal
    end
end
testStringNumberConversion()

def testNestedRescue():
    for i in 10.times():
        addStringAndTryToConvert(i)
    end
    rescue ex:
        if ex: print "Invalid number format detected outside of fun and loop"
        else: print "No invalid numbers detected"
    end
end
def addStringAndTryToConvert(number):
    str = number.toString()
    if Number.randomInt(2): str += "a"
    numVal = str.toNumber()
end
testNestedRescue()

class CarException(Exception):
end

class TankOverflowException(Exception):
end

![dbName = "Car"]
![serialize = false]
class Car:

    ![dbField = "wheels"]
    wheels = 4

    def init(capacity, tank): pass

    def refill(amount):
        print "Doing something"
        if amount < 0: CarException("Amount < 0!").raise()
        if amount > 100: TankOverflowException("Too much gasoline!").raise()
        if @tank + amount > @capacity: @tank = @capacity
        else: @tank = @tank + amount
    end

    def refill(amount, doprint):
        @tank = 0
     end

    ![method = "GET"]
     def f(): pass
end
print "Car annotations"
print !!Car
print !!Car.wheels
print !!Car.f
printFunAnnotations(Car.f)

class OtherCar(Car, Range):
    def init():
        super.init(10, 20)
        @start = 5
        @stop = 10
        @step = 2
        super.refill(2)
        @refill(3)
   end

   def refill(amount):
        print "Doing nothing"
   end

   def has(value):
    return super(Range).has(value)
   end
end

otherCar = OtherCar()
print otherCar.capacity
print 6 in otherCar

#def min3(a, b, c):
#    min2 = def (a, b):
#        if a < b: return a
#        else: return b
#    end
#    return min2(min2(a, b), c)
#end

#d = min3(4, 5, 3)

def refillCar():
    njuKar = Car.builder().capacity(10).tank(20).build()
    print "should be printed"
    njuKar.refill(10)
    print "should be skipped"
    rescue ex:
        print ex.message
        if ex: print "rescue from: " + ex.message
        if ex is CarException: print "car exc"
        else: print ex
        print "rescue always"
    end
    print "after rescue"
end

refillCar()

#string = String.builder().add(3).add("aaa").add(4.5).add("bbb").build().substring(2, 5)
#print string

dict = [a = 1, b = "str", c = Range(1, 10, 3)]
print dict
for i in dict:
    print i
    if i == "b": continue
    print dict.(i)
end

arr = [1, 2, 3]\
    .reversed()\
    .joined(with = [5, 6, 7])\
    .where(def i: i <= 5)\
    .map(def i: i * 2)\
    .sorted(def (l, r): -(l <> r))
print arr

print Math.pow(2, 3)

#Object.each = def f:
#    for item in self: f(item)
#end

#print [a = "1", b = def a: return a * a].b(2)

for i in 6.times(): print i

for c in "abcdef": print c
print "cde" in "abcd"
print "afe" + "pde".1

len = arr.len()
print len

#arr.each(def i: print i * 2)

keys = arr.keys()
print keys

print arr
for i in arr: print i

print "arr has value:"
print 22 in arr

print "dict has key:"
print "gg" in dict

str = "this is a 'string'"
print str

a = 2
while a < 10:
    print a
    a += 1
end

for i in Range(start=10, stop=-20, step=-3):
    print i
end

car = Car(40, 10)
print(car.tank)
car.refill(20)
print(car.tank)
car.refill(20)
print(car.tank)
car.refill(20, 10)
print car.tank

print ivic Car
ivicCar = ivic car
carClone = gu ivicCar
print carClone.matches(car)
print ivic car
print carClone

so = [a = 5, c = "aaa", b = def (a, b):
    c = a + b + "dddd"
    return c
end
]
print ivic so
clone = gu ivic so
print clone.matches(so)
print ivic clone

class_ ModuleClass:

    class_ ModuleClassA:
        a = 5

        def methodA(): return 1
        def methodA(a): return a + 1
    end

    class ModuleClassB:
        b = 6
        def methodA(a): return a + 3
    end
end
#import ModuleClass
print ModuleClassA
print ModuleClassB
print ModuleClassA.matches(ModuleClass.ModuleClassA)

class MixinTest:
    import ModuleClass.ModuleClassB
end
print "Mixin test: " + MixinTest().methodA(4)

class Router:
    def init(a): pass
end

clazz = gu "!Router(2)
class RouterTest:
    !Router(5)
    def b(): return 3
end"
print !!clazz

print 12.bitAnd(25)

aa = 3
aa //= 5
print aa

def testYieldExpr():
    asyncFunc = def (a, callback):
        if a % 2: callback(10)
        else: callback(20)
    end

    test = def ():
#        print ivic self(def)
        print "Before yield expr test"
        a = yield asyncFunc(5)
        print "10 == " + a
        b = yield asyncFunc(10)
        print "20 == " + b
        print "After all"
    end
    test()
    print ivic test
end
testYieldExpr()

def testArgDecomp():
    print ivic self(def)
    f0 = :print "f0"
    f1 = def a: print "f1 \(a)"
    f2 = def (a, b): print "f2 \(a + 3) \((b + 3) * 2)"
    f0([])
    f1([1])
    f2([1, 2])
end
testArgDecomp()

class Button:
    def setTitle(title): @title = title
    def setBackgroundColor(color): @color = color
    def setOnClickListener(listener): @listener = listener
    def performClick(): @listener(self)
end

button = Button()\
    .setTitle("Click me")\
    .setBackgroundColor(Color.WHITE)\
    .setOnClickListener(def sender: print sender.title)
button.performClick()

!Orm.Table()
class OrmTesting:
    !Orm.Column()
    !Orm.PrimaryKey()
    id = 0

    !Orm.Column()
    first = ""

    def init(id, first): pass
end

def mariaDbTest():
    db = MariaDb()
    orm = Orm(db, "localhost", 3306, "test", "root", "")
    print db
    print "db open"
    orm.createTable(OrmTesting)
#    sql = "CREATE TABLE IF NOT EXISTS REGISTRATION (id INTEGER not NULL, first VARCHAR(255), last VARCHAR(255), age INTEGER, PRIMARY KEY ( id ))"
#    db.execute(sql)
#    results = db.execute("SELECT * FROM REGISTRATION")
    results = orm.query(OrmTesting).queryForArray()
    print results
    while results.next():
        print "results.next()"
        print results.getString("first")
    end
    orm.createOrUpdate(OrmTesting(2, "Test2"))
#    orm.delete(OrmTesting(2, "Test2"))
#    orm.deleteForId(OrmTesting, 2)
    print orm.queryForId(OrmTesting, 2)
    orm.close()
    rescue ex:
        if ex: print ex.message
    end
end
#mariaDbTest()

def compositeObjTest():
    compositeObj = [a = 3, 2, b = 4, 3, c = 5, 4, 6]
    print compositeObj
    iv = ivic compositeObj
    print gu iv
    print (gu iv).matches(compositeObj)
    print compositeObj.len()
    print compositeObj.keys()
    print compositeObj.values()
    print compositeObj.reversed()
    print compositeObj.reversed().sorted()
    print compositeObj.where(def d: d is Number)
end
compositeObjTest()
