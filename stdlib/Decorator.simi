import "./Stdlib/CodeBlocks.simi"

Decorator = [
    KEYWORD = "decorate *",

    go = def (f):
        lines = (ivic f).split("\n")
        newLines = Object.array()
        $decorators = nil
        $skip = -1
        for e in lines.enumerate():
            i = e.key
            line = e.value
            trimmedLine = line.trim()
            if trimmedLine.startsWith(@KEYWORD):
#                print trimmedLine.substring(@KEYWORD.len() + 1)
                $decorators = (gu trimmedLine.substring(@KEYWORD.len() + 1)).split(", ")
#                print "Found decorators: " + $decorators
            end
            elsif $decorators and CodeBlocks.Function.isDefLine(trimmedLine):
                func = CodeBlocks.Function(lines, i)
                params = func.parametersWithoutParentheses()
                newLines.append(line)
                tempName = @_tempName()
                newLines.append(tempName + " = def (" + params + "):")
                newLines.addAll(func.body().map(def l: l.replacing(func.name + "(", tempName + "(")))
                newLines.append("end")
                str = String.builder().add("return ")
                for f in $decorators:
                    str.add(f).add("(")
                end
                str.add(tempName)
                for _ in $decorators.len().times():
                    str.add(")")
                end
                needsBrackets = "," in params
                str\
                    .add("(").add(ife(needsBrackets, "[", ""))\
                    .add(params)\
                    .add(ife(needsBrackets, "]", "")).add(")")
                newLines.append(str.build())
                $decorators = nil
                $skip = i + func.body().len()
            end
            elsif i > $skip: newLines.append(line)
        end
        tempName = @_tempName()
#        print  "[" + tempName + " = " + String.from(newLines, "\n") + "\n]." + tempName
        return gu ("[" + tempName + " = " + String.from(newLines, "\n") + "\n]." + tempName)
    end,

    _tempName = def ():
        return "temp" + clock().toString().substring(5)
    end,

    test = def ():
        @go(def ():
            def timed(f):
                wrapper = def args:
                    t1 = clock()
                    val = f(args)
                    print "It took " + (clock() - t1) + " ms to run"
                    return val
                end
                return wrapper
            end

            decorate* "timed"
            def printf(string, args):
                print string.format(args)
            end

            decorate* "timed"
            def sum(n):
                $sum = 0
                for i in n.times():
                    $sum += i
                end
                return $sum
            end

            decorate* "timed"
            def exp(a, b):
                $res = 1
                for _ in b.times():
                    $res *= a
                end
                return $res
            end

            printf("%.2f", [1.1111])
            print sum(10_000)
            print exp(2, 50)
        end)()
    end,

    timed = def f:
        wrapper = def args:
            t1 = clock()
            val = f(args)
            print "It took " + (clock() - t1) + " ms to run"
            return val
        end
        return wrapper
    end,

    memoize = def f:
#        print "In memoize"
        fcache = $[]
        workerCache = $[]
        $farg = nil
        fworker = def f:
            $farg = CodeBlocks.Function(f)
            return flooper()
        end
        flooper = def ():
            while true:
                fname = $farg.name
#                print "In flooper: " + fname
                if fname not in fcache:
                    workerLines = Object.array()
                    workerLines.append($farg.anonymousDeclaration().replacing("(", "(looper, "))
                    $temp = 0
                    for line in $farg.body():
                        trimmedLine = line.trim()
                        if fname in trimmedLine:
                            parts = Object.array()
                            $currentLine = trimmedLine
                            while fname in $currentLine:
                                index = $currentLine.indexOf(fname)
                                parts.append($currentLine.substring(0, index))
                                rest = $currentLine.substring(index)
                                $parenCount = 0
                                $firstParen = -1
                                for i in rest.len().times():
                                    c = rest.(i)
                                    if c == '(':
                                        if $parenCount == 0: $firstParen = i
                                        $parenCount += 1
                                    end
                                    elsif c == ')':
                                        $parenCount -= 1
                                        if $parenCount == 0:
                                            tempName = "temp" + $temp
                                            $temp += 1
                                            $params = rest.substring($firstParen, i + 1)
                                            if $farg.arity != 1:
                                                $params = "[" + $params.substring(1, $params.len() - 1) + "]"
                                            end
                                            workerLines.append("$arg = " + $params)
                                            workerLines.append(tempName + " = looper()")
                                            parts.append(tempName)
                                            $currentLine = rest.substring(i + 1)
                                            break
                                        end
                                    end
                                end
                            end
#                                print parts
                            workerLines.append(String.from(parts, " "))
                        end
                        else: workerLines.append(line)
                    end
                    workerLines.append("end")
#                    print workerLines
                    workerCache.(fname) = gu ("[f = " + String.from(workerLines, "\n") + "].f")
                    fcache.(fname) = def args:
                        cache = $[]
                        $arg = 0
                        $worker = workerCache.(fname)
                        looper = def ():
                           while true:
                            key = $arg.toString()
                            if key not in cache: cache.(key) = $worker([looper].joined($arg))
#                            else: print "found key in cache: " + key
                            yield cache.(key)
                         end
                       end
                       return $worker([looper].joined(args))
                    end
                end
                yield fcache.(fname)
            end
        end
        return fworker(f)
    end
]

#Decorator.test()
