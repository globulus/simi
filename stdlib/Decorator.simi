Decorator = [
    KEYWORD = "decorate *",

    go = def (f):
        lines = (ivic f).split("\n")
        newLines = $Object.array()
        $decorators = nil
        $tempName = nil
        $params = nil
        $endCount = -1
        for line in lines:
            trimmedLine = line.trim()
            if trimmedLine.startsWith(@KEYWORD):
#                print trimmedLine.substring(@KEYWORD.len() + 1)
                $decorators = (gu trimmedLine.substring(@KEYWORD.len() + 1)).split(", ")
#                print "Found decorators: " + $decorators
                continue
            end
            elsif $decorators and @_isDefLine(trimmedLine):
                $params = trimmedLine.substring(trimmedLine.indexOf('(') + 1, trimmedLine.lastIndexOf(')'))
                newLines.append(line)
                $tempName = @_tempName()
                newLines.append($tempName + " = def (" + $params + "):")
                $endCount = 1
#                print "added temp " + $temp
                continue
            end
            elsif trimmedLine.endsWith(":"): $endCount += 1
            elsif trimmedLine == "end" and $endCount > -1:
                $endCount -= 1
                if $endCount == 0 and $decorators:
                    newLines.append("end")
                    $str = $String.builder().add("return ")
                    for f in $decorators:
                        $str.add(f).add("(")
                    end
                    $str.add($tempName)
                    for _ in $decorators.len().times():
                        $str.add(")")
                    end
                    needsBrackets = $params.indexOf(',')
                    $str\
                        .add("(").add(ife(needsBrackets, "[", ""))\
                        .add($params)\
                        .add(ife(needsBrackets, "]", "")).add(")")
                    newLines.append($str.build())
                    $decorators = nil
                end
            end
            newLines.append(line)
        end
        tempName = @_tempName()
#        print  "[" + tempName + " = " + $String.from(newLines, "\n") + "\n]." + tempName
        return gu ("[" + tempName + " = " + $String.from(newLines, "\n") + "\n]." + tempName)
    end,

    _isDefLine = def (line):
        return line.startsWith("def ") or " = def" in line
    end,

    _tempName = def ():
        return "temp" + clock().toString().substring(5)
    end,

    test = def ():
        @go(def ():
            def timed(f):
                wrapper = def args:
                    t1 = clock()
                    val = f(args)
                    print "It took " + (clock() - t1) + " ms to run"
                    return val
                end
                return wrapper
            end

            decorate* "timed"
            def printf(string, args):
                print string.format(args)
            end

            decorate* "timed"
            def sum(n):
                $sum = 0
                for i in n.times():
                    $sum += i
                end
                return $sum
            end

            decorate* "timed"
            def exp(a, b):
                $res = 1
                for _ in b.times():
                    $res *= a
                end
                return $res
            end

            printf("%.2f", [1.1111])
            print sum(10_000)
            print exp(2, 50)
        end)()
    end
]

#Decorator.test()
