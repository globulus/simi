Async = [
    KEYWORD = "await *",

    go = def (f): return gu @s(f),

    s = def (f) {
        flines = (ivic f).split("\n")
        return @swl(flines)
    },

    swl = def (lines) {
        timestamp = clock().toString()
        tempName = "temp" + timestamp
        return "[f = " + @_process(lines, 0, tempName).trim() + "\n}].f"
    },

    _process = def (lines, start, tempName) {
        prepend = "\n"
        for i in Range(start, lines.len()) {
            line = lines.(i)
           if @KEYWORD in line {
               if i > start {
                   prepend += String.from(lines.slice(start, i), "\n") + "\n"
               }
               jump = 1
               if line.endsWith("[") {
                   opens = 0
                   for j in Range(i + 1, lines.len()) {
                       otherLine = lines.(j)
                       if otherLine.endsWith("["): opens += 1
                       elsif otherLine.startsWith("]") {
                           if opens == 0 {
                               jump $= j - i + 2
                               line $= String.from(lines.slice(i, j + 1), " ")
                               break
                           }
                           else: opens -= 1
                       }
                   }
               }
               return prepend + @_makeAwait(tempName + start, line) + @_process(lines, i + jump, tempName) + "\n})"
            }
        }
        return prepend + String.from(lines.slice(start, lines.len()), "\n")
    },

    _makeAwait = def (name, line) {
        varName = line.substring(0, line.indexOf("=")).trim()
        method = line.substring(line.indexOf(@KEYWORD) + @KEYWORD.len() + 1).trim()
        rVar = "var" + name
        return method.substring(0, method.len() - 1) + ", def " + rVar + ":
            " + varName + " = " + rVar
    }
]
