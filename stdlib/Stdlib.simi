class $Object:
    native len(): pass
    native keys(): pass
    native values(): pass
    native isMutable(): pass
    native isArray(): pass

    native iterate(): pass
    native has(obj): pass

    native builder(): pass
end

def ife(condition, ifval, elseval):
    if condition: return ifval
    else: return elseval
end

class Iterator:
    def next(): pass
end

class RangeIterator(Iterator):

    def init(range):
        @range = range
        @current = @range.start
    end

    def next():
        if @current in @range:
            c = @current
            @current = @current + @range.step
            return c
        end
        return nil
    end
end

class Range:

    def init(start, stop):
        @start = start
        @stop = stop
        @step = ife(start < stop, 1, -1)
    end

    def init(start, stop, step): pass

    def iterate():
        return RangeIterator(self)
    end

    def has(val):
        if @start < @stop: return val >= @start and val < @stop
        else: return val <= @start and val > @stop
    end
end

class $Number:
    def times(): return ife(@_ < 0, Range(@_, 0), Range(0, @_)).iterate()
    def to(limit): return Range(@_, limit)
    def downto(limit): return Range(limit, @_)
end

class $String:
    native len(): pass

    native iterate(): pass
    native has(obj): pass
end

Math = [
    pow = native (a, b): pass,
    max = native (a, b): pass,
    min = native (a, b): pass,
    atan2 = native (a, b): pass,

    abs = native (a): pass,
    acos = native (a): pass,
    asin = native (a): pass,
    atan = native (a): pass,
    cbrt = native (a): pass,
    ceil = native (a): pass,
    cos = native (a): pass,
    cosh = native (a): pass,
    exp = native (a): pass,
    floor = native (a): pass,
    log = native (a): pass,
    log10 = native (a): pass,
    log1p = native (a): pass,
    round = native (a): pass,
    signum = native (a): pass,
    sin = native (a): pass,
    sinh = native (a): pass,
    sqrt = native (a): pass,
    tan = native (a): pass,
    tanh = native (a): pass,
    toDegrees = native (a): pass,
    toRadians = native (a): pass
]
