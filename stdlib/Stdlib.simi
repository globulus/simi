import "./stdlib/Stdlib-java.jar"

class$ Object:
    def len(): native
    def keys(): native
    def values(): native
    def methods(): native
    def enumerate(): native
    def zip(): native

    def iterate(): native
    def has(obj): native
    def equals(other): native
    def compareTo(other): native
    def toString(): native
    def matches(other): native
    def matches(other, fields): native

    def append(elem): native
    def addAll(obj): native
    def clear(): native

    def indexOf(elem): native
    def reversed(): native
    def sorted(): native
    def sorted(comparator): native
    def uniques(): native

    def clone(): native
    def clone(mutable): native
    def isMutable(): native
    def isArray(): native
    def classObject(): native

    def array(): native
    def array(capacity): native
    def array(capacity, fillValue): native
    def arrayWithIterator(iterator):
        buffer = Object.array()
        for item in iterator: buffer.append(item)
        return buffer
    end
    def slice(start, stop): native
    def builder(): native

    def length(): return @len()
    def isEmpty(): return @len() == 0
    def first():
        if @isEmpty(): return nil
        else: return @0
    end
    def last():
        len = @len()
        if len == 0: return nil
        else: return @(len - 1)
    end
    def push(elem): @append(elem)
    def every(predicate):
        for item in self:
            if not condition(item): return false
        end
        return true
    end
    def where(predicate):
        buffer = Object.array()
        for item in self:
            if predicate(item): buffer.append(item)
        end
        if @isArray(): return buffer
        else: return buffer.zip()
    end
    def find(predicate):
        for item in self:
            if predicate(item): return item
        end
        return nil
    end
    def findIndex(predicate):
        if not @isArray(): return nil
        item = @find(predicate)
        if item != nil: return item.key
        else: return nil
    end
    def forEach(function):
        for item in self: function(item)
        return self
    end
    def joined(with):
        clone = @clone()
        extra = with
        if with is not Object: extra $= [with]
        clone.addAll(extra)
        return clone
    end
    def map(function):
        if @isArray():
             buffer = Object.array()
             for item in self: buffer.append(function(item))
             return buffer
        end
        else:
            buffer = $[]
            for key in self: buffer.(key) = function(key, @(key))
            return buffer
        end
    end
    def pop():
        len = @len()
        if len == 0: return nil
        else:
            val = @(len - 1)
            @(len - 1) = nil
            return val
        end
   end
   def reduce(initialValue, reducer):
        val = initialValue
        for item in self:
            val $= reducer(val, item)
        end
        return val
   end
   def reduceRight(initialValue, reducer): return @reversed().reduce(initiaValue, reducer)
   def shift():
        if @isEmpty(): return nil
        else:
            val = @0
            @0 = nil
            return val
        end
   end
   def removeIf(predicate):
       for item in self.enumerate():
           if predicate(item): @(item.key) = nil
       end
   end
   def slice(start): return @slice(start, @len())
end

class_ Function:
end

class Exception:
    def init(message): pass

    def raise(): native
end

class NumberFormatException(Exception):
end

class NilReferenceException(Exception):
end

class IllegalArgumentException(Exception):
end

def ife(condition, ifval, elseval):
    if condition: return ifval()
    else: return elseval()
end

class Iterator:
    def next(): pass
end

class RangeIterator(Iterator):
    def init(range):
        @range = range
        @current = @range.start
    end

    def next():
        if @current in @range:
            c = @current
            @current = @current + @range.step
            return c
        end
        return nil
    end
end

class Range:
    def init(start, stop):
        @start = start
        @stop = stop
        @step = ife(start < stop, 1, -1)
    end

    def init(start, stop, step): pass

    def iterate():
        return RangeIterator(self)
    end

    def has(val):
        if @start < @stop: return val >= @start and val < @stop
        else: return val <= @start and val > @stop
    end

    def toString():
        return String.builder()\
            .add("Range from ").add(@start)\
            .add(" to ").add(@stop)\
            .add(" by ").add(@step)\
            .build()
    end
end

class$ Number:
    def isInteger(): native

    def times(): return ife(@_ < 0, :Range(@_, 0), :Range(0, @_)).iterate()
    def to(limit): return Range(@_, limit)
    def downto(limit): return Range(limit, @_)

    def randomInt(max): native

   def equals(other): native
   def compareTo(other): native
   def toString(): native

    def sum(a, b): return a + b
    def product(a, b): return a * b

    def bitAnd(num): native
    def bitOr(num): native
    def bitXor(num): native
    def bitInv(): native
    def bitShl(num): native
    def bitShr(num): native
    def bitUshr(num): native
end

class$ String:
   def len(): native
   def endsWith(suffix): native
   def format(args): native
   def indexOf(str, index): native
   def lastIndexOf(str, index): native
   def removing(start, stop): native
   def replacing(old, new): native
   def split(separator): native
   def startsWith(prefix): native
   def substring(start, stop): native
   def lowerCased(): native
   def upperCased(): native
   def trim(): native
   def isAlpha(): native
   def isDigit(): native

   def iterate(): native
   def has(obj): native
   def equals(other): native
   def compareTo(other): native
   def toNumber(): native

   def builder(): native

    def sum(a, b): return a + b
    def from(array, separator):
        first = true
        f = def (a, b):
            s = ""
            if first: first $= false
            else: s $= separator
            return a + s + b
       end
       return array.reduce("", f)
    end

    def length(): return @len()
    def indexOf(str): return @indexOf(str, 0)
    def lastIndexOf(str): return @lastIndexOf(str, @len() - 1)
    def removing(start): return @slice(start, @len())
    def substring(start): return @substring(start, @len())
    def isEmpty(): return @len() == 0
end

class TypeMismatchException(Exception):
    def init(var, type): super.init("Expected: \(type) but got " + var.("class"))
end

Math = [
    pow = def (a, b): native,
    max = def (a, b): native,
    min = def (a, b): native,
    atan2 = def (a, b): native,
    abs = def (a): native,
    acos = def (a): native,
    asin = def (a): native,
    atan = def (a): native,
    cbrt = def (a): native,
    ceil = def (a): native,
    cos = def (a): native,
    cosh = def (a): native,
    exp = def (a): native,
    floor = def (a): native,
    log = def (a): native,
    log10 = def (a): native,
    log1p = def (a): native,
    logn = def (a, b): return @log(a) / @log(b),
    round = def (a): native,
    signum = def (a): native,
    sin = def (a): native,
    sinh = def (a): native,
    sqrt = def (a): native,
    tan = def (a): native,
    tanh = def (a): native,
    toDegrees = def (a): native,
    toRadians = def (a): native
]

class Closeable:
    def close(): native
end

class Date:
    def init(timestamp): pass

    def now(): native
    def format(pattern): native
end

class Enum:
    def of(obj): return @of(obj, nil)

    def of(obj, funs):
       if not obj or obj.isEmpty(): return nil

        timestamp = clock().toString()
        joined = obj.reduce("", String.sum)
        className = "EnumClass" + joined + timestamp

        isArray = obj.isArray()
        isFirstValueScalar = obj.0 is not Object
        args = "value"
        if not isArray and not isFirstValueScalar: args $= String.from(obj.0, ", ")
        args += ", key"

        guStr = "class$ \(className)(Enum):
            def init(\(args)): pass
            def equals(other): return @matches(other)
        end"
        clazz = gu guStr

        for key in obj:
            val = nil
            if isArray: val $= clazz(key, key)
            elsif isFirstValueScalar: val $= clazz(obj.(key), key)
            else:
                args $= String.from(obj.(key).values(), ", ")
                args += ", \(key)"
                constructor =  "clazz(" + args + ")"
                val $= gu constructor
            end
            clazz.(key) = val
        end

        for key in funs:
            clazz.(key) = funs.(key)
        end

        return clazz
    end
end

Meta = [
    go = def (mutators, f):
        mutated = f
        mutators.forEach(def m: mutated $= m.go($mutated))
        return mutated
    end
]
