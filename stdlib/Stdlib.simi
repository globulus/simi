import "./stdlib/Stdlib-java.jar"

"Test for class"
class $Object:
"Test for method"
    native len(): pass
    native keys(): pass
    native values(): pass
    native enumerate(): pass
    native zip(): pass

    native iterate(): pass
    native has(obj): pass
    native equals(other): pass
    native compareTo(other): pass
    native toString(): pass
    native matches(other): pass
    native matches(other, fields): pass

    native append(elem): pass
    native addAll(obj): pass
    native clear(): pass

    native indexOf(elem): pass
    native reversed(): pass
    native sorted(): pass
    native sorted(comparator): pass
    native uniques(): pass

    native clone(): pass
    native clone(mutable): pass
    native isMutable(): pass
    native isArray(): pass
    native classObject(): pass

    native array(): pass
    native array(capacity): pass
    native array(capacity, fillValue): pass
    native builder(): pass

    def length(): return @len()
    def isEmpty(): return @len() == 0
    def first():
        if @isEmpty(): return nil
        else: return @0
    end
    def last():
        len = @len()
        if len == 0: return nil
        else: return @(len - 1)
    end
    def push(elem): @append(elem)
    def every(predicate):
        for item in self:
            if not condition(item): return false
        end
        return true
    end
    def filter(predicate):
        buffer = $[]
        for item in self:
            if predicate(item): buffer.append(item)
        end
        if @isArray(): return buffer
        else: return buffer.zip()
    end
    def find(predicate):
        for item in self:
            if predicate(item): return item
        end
        return nil
    end
    def findIndex(predicate):
        if not @isArray(): return nil
        item = @find(predicate)
        if item != nil: return item.key
        else: return nil
    end
    def forEach(function):
        for item in self: function(self)
    end
    def joined(with):
        clone = @clone()
        clone.addAll(with)
        return clone
    end
    def map(function):
        buffer = $[]
        for item in self: buffer.append(function(item))
        if @isArray(): return buffer
        else: return buffer.zip()
    end
    def pop():
        len = @len()
        if len == 0: return nil
        else:
            val = @(len - 1)
            @(len - 1) = nil
            return val
        end
   end
   def reduce(initialValue, reducer):
        $val = initialValue
        for item in self:
            $val = reducer($val, item)
        end
        return $val
   end
   def reduceRight(initialValue, reducer): return @reversed().reduce(initiaValue, reducer)
   def shift():
        if @isEmpty(): return nil
        else:
            val = @0
            @0 = nil
            return val
        end
   end
   def removeIf(predicate):
       for item in self.enumerate():
           if predicate(item): @(item.key) = nil
       end
   end
   def slice(start): return @slice(start, @len())
   def slice(start, stop):
       buffer = $[]
       for i in Range(start, stop): buffer.append(@(i))
       return buffer
   end
end

class Exception:
    def init(message): pass

    native raise(): pass
end

class NumberFormatException(Exception):
end

def ife(condition, ifval, elseval):
    if condition: return ifval
    else: return elseval
end

class Iterator:
    def next(): pass
end

class RangeIterator(Iterator):

    def init(range):
        @range = range
        @current = @range.start
    end

    def next():
        if @current in @range:
            c = @current
            @current = @current + @range.step
            return c
        end
        return nil
    end
end

class Range:

    def init(start, stop):
        @start = start
        @stop = stop
        @step = ife(start < stop, 1, -1)
    end

    def init(start, stop, step): pass

    def iterate():
        return RangeIterator(self)
    end

    def has(val):
        if @start < @stop: return val >= @start and val < @stop
        else: return val <= @start and val > @stop
    end

    def toString():
        return $String.builder()\
            .add("Range from ").add(@start)\
            .add(" to ").add(@stop)\
            .add(" by ").add(@step)\
            .build()
    end
end

class $Number:
    def times(): return ife(@_ < 0, Range(@_, 0), Range(0, @_)).iterate()
    def to(limit): return Range(@_, limit)
    def downto(limit): return Range(limit, @_)

    native equals(other): pass
    native compareTo(other): pass
    native toString(): pass

    def sum(a, b): return a + b
    def product(a, b): return a * b
end

class $String:
    native len(): pass
    native endsWith(suffix): pass
    native format(args): pass
    native indexOf(str, index): pass
    native lastIndexOf(str, index): pass
    native removing(start, stop): pass
    native replacing(old, new): pass
    native split(separator): pass
    native startsWith(prefix): pass
    native substring(start, stop): pass
    native lowerCased(): pass
    native upperCased(): pass
    native trim(): pass
    native isAlpha(): pass
    native isDigit(): pass

    native iterate(): pass
    native has(obj): pass
    native equals(other): pass
    native compareTo(other): pass
    native toNumber(): pass

    native builder(): pass

    def sum(a, b): return a + b
    def from(array, separator):
        $first = true
        f = def (a, b):
            $s = ""
            if $first: $first = false
            else: $s = separator
            return a + $s + b
       end
       return array.reduce("", f)
    end

    def length(): return @len()
    def indexOf(str): return @indexOf(str, 0)
    def lastIndexOf(str): return @lastIndexOf(str, @len() - 1)
    def removing(start): return @slice(start, @len())
    def substring(start): return @substring(start, @len())
end

Math = [
    pow = native (a, b): pass,
    max = native (a, b): pass,
    min = native (a, b): pass,
    atan2 = native (a, b): pass,
    abs = native (a): pass,
    acos = native (a): pass,
    asin = native (a): pass,
    atan = native (a): pass,
    cbrt = native (a): pass,
    ceil = native (a): pass,
    cos = native (a): pass,
    cosh = native (a): pass,
    exp = native (a): pass,
    floor = native (a): pass,
    log = native (a): pass,
    log10 = native (a): pass,
    log1p = native (a): pass,
    logn = def (a, b): return @log(a) / @log(b),
    round = native (a): pass,
    signum = native (a): pass,
    sin = native (a): pass,
    sinh = native (a): pass,
    sqrt = native (a): pass,
    tan = native (a): pass,
    tanh = native (a): pass,
    toDegrees = native (a): pass,
    toRadians = native (a): pass
]

class Closeable:
    def close(): pass
end

class Date:
    def init(timestamp): pass

    native now(): pass
    native format(pattern): pass
end

class Enum:
    def of(obj):
        return Enum.of(obj, nil)
    end

    def of(obj, funs):
       if not obj or obj.isEmpty(): return nil

        timestamp = clock().toString()
        joined = obj.reduce("", $String.sum)
        className = "$EnumClass" + joined + timestamp.substring(timestamp.indexOf('.') + 1)

        isArray = obj.isArray()
        isFirstValueScalar = obj.0 is not $Object
        $args = "value"
        if not isArray and not isFirstValueScalar: $args = $String.from(obj.0, ", ")

        guStr = "class " + className + "(Enum):
            def init(" + $args + "): pass
            def equals(other): return @matches(other)
        end"
        clazz = gu guStr

        for key in obj:
            $val = nil
            if isArray: $val = clazz(key)
            elsif isFirstValueScalar: $val = clazz(obj.(key))
            else:
                args = $String.from(obj.(key).values(), ", ")
                constructor =  "clazz(" + args + ")"
                $val = gu constructor
            end
            clazz.(key) = $val
        end

        if funs:
            for key in funs:
                clazz.(key) = funs.(key)
            end
        end

        return clazz
    end
end
